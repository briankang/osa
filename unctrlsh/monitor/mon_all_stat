#!/bin/bash

PWD=`dirname $(dirname $(readlink /proc/$$/fd/255))`

run_all(){
	/bin/sh $PWD/monitor/$1 >> allinfo
}
#定义并发进程数量

PARALLEL=2 

#定义临时管道文件名

TMPFILE=$$.fifo

#定义导出配置文件全路径名

CMD_CFG=$PWD/log/mon_all_stat.txt

grep -v '^#' $PWD/etc/mon_all_stat.conf | grep -v '^$' > $CMD_CFG

#定义失败标识文件

FAILURE_FLAG=failure.log


####################### 函数定义 ########################

# 中断时kill子进程

function trap_exit

{

kill -9 0

}


# 通用执行函数

exec_cmd()

{

    # 此处为实际需要执行的命令

        run_all ${1}

    if [ $? -ne 0 ]

    then

        echo "命令执行失败"

        return 1

    fi

}


trap 'trap_exit; exit 2' 1 2 3 15



#清理失败标识文件

rm -f  ${FAILURE_FLAG}



#为并发进程创建相应个数的占位

mkfifo $TMPFILE 

exec 4<>$TMPFILE 

rm -f $TMPFILE 

{ 

        count=$PARALLEL

        while [ $count -gt 0 ]

        do 

                echo

                let count=$count-1

        done 

} >&4



#从任务列表 seq 中按次序获取每一个任务 

while read SEC 

do 

        read <&4

        (  exec_cmd ${SEC} || echo ${SEC}>>${FAILURE_FLAG} ; echo >&4 ) &

done<$CMD_CFG

wait 

exec 4>&- 



#并发进程结束后判断是否全部成功

if [ -f ${FAILURE_FLAG} ]

then

        exit 1

else
	str=`cat allinfo|sed s/"\""/'##'/g|xargs|sed s/" "/','/g|sed s/'##'/"\""/g`
	num=`cat allinfo|wc -l`
	if [ $num -gt 3 ]
	then
		echo "{"$str"}"
		>allinfo
        	exit 0
	else
		echo 'null'
	fi

fi

